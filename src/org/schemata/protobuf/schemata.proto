syntax = "proto3";

package org.schemata.schema;

import "google/protobuf/descriptor.proto";

option java_package = "org.schemata.schema";
option java_outer_classname = "SchemataBuilder";

// MessageType captures the type of the stream. There are two types of stream.
enum Type {
  // This is an invalid state. If the entity defined as unknown the validator should throw an exception.
  UNKNOWN = 0;
  //Entity streams can be mutated in the downstream services. Entity streams often used to represent the current
  //state of the entity. In the classical DW concepts Entities typically represents the dimensions.
  // Entity must have a primary key field.
  ENTITY = 1;
  // Event streams are typically immutable in nature. Event streams often used to represent the state change of an Entity.
  // In the classical DW concepts Event streams represents the facts. Event streams will not have a primary key field.
  EVENT = 2;
}

enum EventType {
  // Invalid Event Type. If the message type is event, set it either LIFECYCLE or ACTIVITY or AGGREGATED
  NONE = 0;
  // LIFECYCLE event captures the state changes of an Entity. (e.g) User created, User deleted et al.
  LIFECYCLE = 1;
  // ACTIVITY event captures the events that resulted from one Entity changing the state of another Entity.
  // (e.g.) User A purchases Product B. The ACTIVITY event is often the result of a business transaction.
  ACTIVITY = 2;
  // AGGREGATED event captures the computed metrics over a specified window of time. (e.g) Number of views by a User for a Product.
  AGGREGATED = 3;
}

enum ActivityType {
  CREATED = 0;
  DELETED = 1;
  UPDATED = 2;
}

enum TimeUnit {
  SECONDS = 0;
  MINUTES = 1;
  HOURS = 2;
}

// CoreMetadata is the set of attribute apply to both the Message & Field
message CoreMetadata {
  // Mandatory Metadata: description of the entity
  optional string description = 50001;
  // Optional Metadata: additional comments about the entity
  optional string comment = 50002;
  // Optional Metadata: Any related entity that has "hierarchy" or "has a"  relationships.
  optional string see_also = 50003;
  // Optional Metadata: Additional link reference for further reading.
  // It could be a confluent page, An ADR or RFC or a Slack message link.
  optional string reference = 50004;
}


extend google.protobuf.MessageOptions {

  // message.description is a Mandatory Metadata
  CoreMetadata message_core = 60001;
  // Mandatory Metadata: owner of the entity. Usually it is the team name.
  string owner = 60002;
  // Mandatory Metadata: domain = 'core' indicates the entity is common across all the domains.
  // Other possible domains are `sales`, `marketing`, `product` etc
  string domain = 60003;
  // Mandatory Metadata: define the type of the message.
  Type type = 60004;
  // Status of the entity. You can have `testing`, `production` or `staging` depends on the lifecycle of schema definition.
  string status = 60005;
  // Slack or Teams channel name to communicate with the team which owns ths entity
  string team_channel = 60006;
  // Slack or Teams channel name to alert for any validation errors.
  string alert_channel = 60007;
  // Type of the event. Set if the Type = 'EVENT'
  EventType event_type = 60008;
  // Compliance Owner approves which team should have access to this Schema.
  string compliance_owner = 60009;
  // Compliance Owner Slack/ Teams Channel name
  string compliance_channel = 600010;
}

extend google.protobuf.FieldOptions {
  // message.description is a Mandatory Metadata
  CoreMetadata field_core = 70001;
  // Set true if the field contains classified data (Optional).
  bool is_classified = 70002;
  // Set the classification level if is_classified is true (This is Mandatory if is_classified set to true)
  string classification_level = 7003;
  // Specify the product type. product_type is an useful annotation to represent a field in a business perspective.
  // (e.g) user_id can be an INT field, but in the system design it could represent External Users rather than internal users.
  string product_type = 70004;
  // Set true if the field is a primary key. This must be true if the Schema type is Entity
  bool is_primary_key = 70005;
}